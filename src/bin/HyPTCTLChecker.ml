(* 
 * File: HyPTCTLChecker.ml 
 * Author: Masaki Waga
 * Date: 2024-03-05
 *)

open Lib

(* Main function *)
let () =
  print_string "HyPTCTLChecker: Prototype tool for model checking of (Ext)HyperPTCTL with IMITATOR\n";
  (* Check if two filenames are given as CLI arguments *)
  if Array.length Sys.argv <> 4 then
    begin
      print_endline "Usage: dune exec HyPTCTLChecker <model file> <property file> <output filename>";
      exit 0
    end
  else
    begin
      let model_file = Sys.argv.(1) in
      let property_file = Sys.argv.(2) in
      let output_file_prefix = Sys.argv.(3) in
      let output_model_file = output_file_prefix ^ ".imi" in
      let output_property_file = output_file_prefix ^ ".imiprop" in
      print_endline ("Model file: " ^ model_file);
      print_endline ("Property file: " ^ property_file);
      (* Open model file and parse it *)
      let variable_decl, automata, init_list =
        ModelParser.main ModelLexer.token (Stdlib.open_in model_file |> Lexing.from_channel) in
      (* Open property file and parse it *)
      let property =
        PropertyParser.main PropertyLexer.token (Stdlib.open_in property_file |> Lexing.from_channel) |> 
          ImitatorProperty.parseEmbedded in
      print_endline ("Writing the new model to " ^ output_model_file);
      let write_output_model =
        Stdlib.open_out output_model_file |>
          Stdlib.output_string in
      write_output_model "(* This is a model file automatically generated by HyPTCTLChecker *)\n";
      let model = List.map Model.Automaton.from_autom automata in
      let compositionSize = ImitatorProperty.compositionSize property in
      let lastClockVarDef =
        List.map Model.Automaton.makeLastClockVarDefinition model |>
          ImitatorVariableDefinition.duplicate_variables_list compositionSize in
      let countsVarDef =
        List.map Model.Automaton.makeCountsVarDefinition model |>
          ImitatorVariableDefinition.duplicate_variables_list compositionSize in
      let statusVarDef =
        List.map Model.Automaton.makeStatusVarDefinition model |>
          ImitatorVariableDefinition.duplicate_variables_list compositionSize in
      let observerVarDef = ImitatorProperty.observerVariableDeclaration property in
      let originalVarDef = ImitatorVariableDefinition.duplicate_variables_list compositionSize variable_decl in
      let global_time = ImitatorProperty.global_time property in
      print_endline ("global_time is " ^ if global_time then "enabled" else "disabled");
      write_output_model "\n\n(* Variable Declarations *)\n\n";
      let global_time_definition =
        if global_time then
          [ImitatorVariableDefinition.clock_variables ["global_time"]]
        else
          []
      in
      observerVarDef :: lastClockVarDef @ countsVarDef @ statusVarDef @ (ImitatorVariableDefinition.internal_variables @ originalVarDef) @ global_time_definition |>
        ImitatorVariableDefinition.definition_string |>
        write_output_model;

      write_output_model "\n\n(* Models  *)\n\n";
      let initial_location_map = InitState.to_initial_location_map init_list compositionSize in
      let parameters = ImitatorVariableDefinition.parameters variable_decl in
      List.map Model.Automaton.from_autom automata |>
        List.map (Model.Automaton.duplicate compositionSize parameters) |>
        List.concat |>
        List.map (Model.Automaton.splitTransitions) |>
        List.map (Model.Automaton.make_dummy_initial_location initial_location_map) |>
        List.map (Model.Automaton.apply_count_mods (ImitatorProperty.count_mods property)) |>
        List.map Model.Automaton.to_string |>
        String.concat "\n" |> write_output_model;

      write_output_model "\n\n(* Observers  *)\n\n";
      ImitatorProperty.to_observer property |>
        write_output_model;

      write_output_model "\n\n(* Initialization  *)\n\n";

      let lastClockVarInit =
        List.map Model.Automaton.makeLastClockVarInit model |>
          List.concat |>
          InitState.duplicate compositionSize parameters in
      let countsVarInit =
        List.map Model.Automaton.makeCountsVarInit model |>
          List.concat |>
          InitState.duplicate compositionSize parameters in
      let statusVarInit =
        List.map Model.Automaton.makeStatusVarInit model |>
          List.concat |>
          InitState.duplicate compositionSize parameters in

      [InitState.duplicate compositionSize parameters init_list |>
         InitState.use_our_initial_location;
       InitState.default_initialization;
       ImitatorProperty.observerInit property;
       lastClockVarInit;
       countsVarInit;
       statusVarInit] |>
        List.concat |>
        InitState.to_string |> write_output_model;
      print_endline("Done");

      print_endline ("Writing the new property to " ^ output_property_file);
      let write_output_property =
        Stdlib.open_out output_property_file |>
          Stdlib.output_string in
      ImitatorProperty.ignore_uninitialized property |>
        ImitatorProperty.embedded |>
        write_output_property;
      print_endline("Done");
    end
