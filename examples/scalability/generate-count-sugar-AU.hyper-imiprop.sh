#!/bin/bash -ue

# Check the commandline argument
if (( "$#" != 1 )); then
    echo "usage: $0 [number of path variables] > [OUTPUT_FILENAME]"
    exit 0
fi

# Generate the header
cat <<EOF
(* -*- mode: imitator-property; -*- *)
(************************************************************
 *                 HyPTCTLChecker PROPERTY
 *
 *
 * Description     : Toy example to evaluate the scalability of AUSynth with respect to the number of quantified path variables.
 * Assumptions     : The model should have a parameter "parameter"
 * Source          : Own work
 * Author          : Étienne André, Masaki Waga
 * License         : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * This file is automatically generated.
 *
 * HyPTCTLChecker version: alpha
 * IMITATOR version: 3.4-alpha
 ************************************************************)
(* We use the special clock variable for the global time *)
EOF

# Generate the let part
for i in $(seq "$1"); do
    printf "let positive_last_diff_%d_%d = LAST_SUGAR_%d - LAST_SUGAR_%d < 0 in\n" "$i" "$((i+1))" "$i" "$((i+1))"
done

cat <<EOF
<*
property := #synth A (
	(* Assert the number of sugars *)
EOF

# Generate the left part
for i in $(seq "$1"); do
    printf "	(COUNT_SUGAR_%d > COUNT_SUGAR_%d => positive_last_diff_%d_%d)" "$i" "$((i+1))" "$i" "$((i+1))"
    if ((i < $1)); then
        printf " &&"
    fi
    printf "\n"
done

# Generate the middle part
cat <<EOF
	) U_[param,param] (
EOF

# Generate the right part
for i in $(seq 0 "$1"); do
    printf "	COUNT_GOAL_%d = 1 &&\n" "$((i+1))"
done

# Generate the footer
cat <<EOF
    status_GOAL_1 = CHANGED_UP
	)
;
*>
EOF
